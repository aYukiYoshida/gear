書式

	awk [ -F fs ] [ -v var=value ] [ 'prog' | -f progfile ] [ file ...  ]

解説

	ASCIIファイルを列ごとに処理して表示する、超多機能で便利
	割算は1ではなく1.0の様に小数点を付けないと不正確になるので注意
	http://www.not-enough.org/abe/manual/command/awk.html

オプション

	-F[arg]		: [arg]をセパレータとする

使用例

	awk '{ pattern { action } }'
	awk '$3>0{print $1,$2*3,aho}' aho=${HOME} input.txt
	awk -F, -f progfile.awk input.txt
	awk '{printf ("sum=%0.6f\n",aho)}' aho.txt
	awk 'NR==2 {print $2}'					: 2行目の2列目だけ表示
	awk '{print $1*3.,$3}' input.txt			: 列ごとの計算も可能
	awk '{s+=$1}END{print "sum",s, "average",s/NR}' in.txt	: 行の値を全て足す
	awk '($1>20)&&($1<100)' input.txt			: 1列目が20以上で100以下の行だけ表示する
	awk '{printf "%f\n", ($3*'${aho}')*2.5 }' input.txt	: bashなどで演算子を使用する時には''で囲む
	echo "1 2" | awk '{print $1+$2}'			: awkを経由して簡単に計算を行わせる方法
	awk 'BEGIN{a=0}{a=a+$1}END{print a}'			: すべての行の足し算
	awk 'BEGIN{a=0}'					: 行に入る前の処理
	awk 'END{print a}'					: 行の処理の後の処理
	awk 'BEGIN{OFS=","}{print $1,$2}'			: 区切りをカンマで出力する

	## 1列目2列目だけ変更して3行名以降はそのまま表示 (列の数がわからないときに便利)
	awk '{printf("%s",$0); printf("%s",$1); for(i=3;i<=NF;i++)printf("%s ",$i); printf("\n");}

入出力

	close
	getline : 次のレコード(行)を読む 
	getline < ファイル : ファイルから1レコード読み込む 
	getline 変数    次のレコード(行)を読んで変数に代入する 
	getline 変数 < ファイル    ファイルから1レコード読み込んで変数に代入する 
	print    現在のレコードを出力する(print $0 と同じ) 
	print 式の並び    式の並びを出力する 
	print 式の並び > ファイル    式の並びをファイルに出力する 
	printf ( 書式 , 式の並び )    式の並びを書式にしたがって出力する(C言語のprintf()とほぼ同じ) 
	printf ( 書式 , 式の並び ) > ファイル    式の並びを書式にしたがってファイルに出力する
	system ( コマンド )    UNIXのコマンドを実行する

特殊変数

	ARGC    コマンド行にある引数の数 
	ARGV    コマンド行にある引数の配列 
	FILENAME    現在の入力ファイル名 
	FNR    現在のファイルの入力レコード数 
	FS    コラムを区切る文字(デフォールトはスペース) 
	NF    現在の入力レコードのコラム数 
	NR    現在までの入力レコード数 
	RS 入力レコードの区切りの文字(デフォールトは改行)

	NF(ARGC)	: フィールドの数
	NR		: 処理中の行の順番
	$NF		: 最後のフィールド
	$NR		: 最初のフィールド
	$0		: 1行全部

演算子

	>=		: 以上
	<=		: 以下
	==		: イコール
	&&		: かつ
	||		: または
	!=		: 否定

パターンマッチ

	awk '/exp/ {print $0}'		: expに適合する部分文字列があるか？
	awk '$2~/exp/ {print $0}'	: 式が正規表現に適合するか？
	awk '$2~!/exp/ {print $0}'	: 式が正規表現に適合しないか？

	BEGIN
	END

アクション

	break
	continue
	delete 配列要素
	do 文 while (式)
	exit [式]
	式
	if (式) 文 [else 文]
	入出力文
	for (式; 式; 式) 文
	for (変数 in 配列) 文
	next
	while (式) 文
	{ 文の並び }

条件
	awk '{if(式){文}[else{文}]}'
	awk '{if(/_x/){print $1,$2,$3-1,$4}else{print}}'
	awk '{if($2<=$3+1){print $1,$2,$3-1,$4}else{print}}'

ループ
	echo "" | awk '{for(i=0;i<5;i=i+1){print i}}'
	echo "" | awk '{i=1;while(i<=10){print i ; i++}}'

文字列操作
	echo "abcdef" | awk '{print substr($1,3,2)}' : 3文字目から2文字分を表示する
	awk '{if(NR%3==2){sub(/$/,"");printf("%s",$0)}else{print}}' : ある条件で連結
	awk '{printf("%s ",$0)}' : 横に連結

表記
	%s	: 文字列として出力
	%c	: 1文字として出力
	%d	: 10進法
	%x	: 16進法
	%o	: 8進法
	%f	: 浮動小数点
	%e	: 指数

	%5d	: 5桁ぶんのスペースをあけて表示
	%.3d	: 強制的に3桁で表示

 組み込み文字列関数

gsub(r, s, t)
    tの中で、rと一致するものをsで置き換える。
    置き換えた個数を返す。 tが省略されると$0がtの代わりに使われる。 
index(s, t)
    sの中でtを見つけた位置を返す。
    見つからない時は0を返す。 
length(s)
    sの長さを返す。 
match(s, r)
    sがrに適合する位置を返す。 
split(s, a, fs)
    fsを区切りの文字としてsを配列aの中にに分解する。
    分解されたコラムの数を返す。 
sprintf(書式, 式の並び)
    式の並びを書式で整えたものを返す。 
substr(s, i, n)
    sの中からi文字目からi+n-1文字目までを返す。
    nが省略された場合はi文字目から最後の文字までを返す。 

プリント
	awk '{print "aho" > "/dev/tty"}' : ディスプレイへの打ち出し

####################################################################
#                awk に関するメモ
####################################################################
=======================================================================
			      基本的な例
=======================================================================
■基本形
    awk 'プログラム' 入力ファイル
    awk -f プログラムファイル名 入力ファイル

    プログラムの書き方は以下のようになる

        パターン {アクション}	    # パターンは勿論 RE である
        パターン {アクション}
	...

	or
    
	パターン {アクション; アクション}[;] パターン{アクション; アクション}

    パターンにマッチすると，アクションが実行される
    文は ; 改行 } のどれかで終了する
    入力ファイルの内容は変更しない
    入力ファイルを指定しなければ，標準入力が入力して利用される
    出力は標準出力へ

■ egrep のエミュレート
    awk '/RE/{print}' filenames
    awk '/RE/' filenames	# アクションを省略すると print が使われる

■ cat のエミュレート
    awk '{print}' filenames	# パターンを省略するとすべてにマッチ

■フィールド
    入力行は自動的に複数のフィールドに分割される
    各フィールドは $1, $2, ... $NF となる
    
    $0 = 入力行全体
    NF = フィールド総数を表す変数
    （sed の変数にはフィールド以外 $ はつけない）

    ex) who | awk '{print $1,$5}'	#ユーザのログイン時刻を表示
        who | awk '{print $1"\t"$5}'	#タブを含んで見やすくした
        who | awk '{print $1"\t"$5}' | sort +1 -n # 時刻順にソート
	who | awk '{print $1"\t"substr($5,1,2)}' 
					#ログイン時刻の分の部分を削除

■フィールドセパレータ
    -F オプションまたは FS 変数への代入で変更可能
    デフォルトはタブと空白文字

    ex) awk -F: '{print $1, $4}' /etc/passwd # ログイン名と本名を表示

■表示
    awk '{print $1 $3} foo	# 続けて表示
    awk '{print $1, $3} foo	# 出力フィールドセパレータで区切って表示
    awk '{printf "%4d %s\n", $1 $3} foo #フォーマットして表示

■パターン
    awk '$2==""' foo	    # $2 が空文字列
    awk '$2 ~ /^$/' foo	    # 同上（正規表現のマッチを利用）
    awk '$2 !~ /./' foo	    # 同上（正規表現の非マッチを利用）
    awk 'length($2) == 0' foo	# 同上（関数を利用）

    awk 'NF % 2 !=0' foo	# フィールド数が奇数
    awk 'length($0) > 72' foo	# 一行が長すぎる

    awk 'BEGIN{FS=":"} $1=="susumu"' /etc/passwd 
				# BEGIN パターンの利用（FS の変更）

    awk 'END{print NR}' foo	# END パターンの利用（行数の表示）

■算術演算と変数
    awk '{s+=$1} END{print s}' foo 
				# foo の第一フィールドの値の和を表示
    
    awk '{nc+=length($0)+1; nw+=NF} END {print NR,nw,nc}' foo
				# wc のエミュレート

    変数は暗黙の内に初期化されている
    変数に文字列・数値の区別はない
        
■文字列定数
    ""	ダブルクォートで囲む（C と同じ）

■配列
    連想配列と普通の配列が一緒になっている
        a["hogehoeg"]
        a[1]
    ともに OK であり，名前空間は同一である

■演算子（優先度の高い順）
    ++ --
    * / %
    + -
    (何も無し）	    文字列の連結
    > >= < <= == != ~ !~    関係演算子	(~ は正規表現のマッチ）
    !		    論理否定
    &&		    論理積
    ||		    論理和
    = += -= /= %=   代入

■組み込み変数
    FILENAME	現入力ファイル名
    NF		現レコード中のフィールド数
    NR		現レコード番号（つまり行番号）
    FS		入力フィールドセパレータ（デフォルトはスペースとタブ）
    OFS		出力レコードセパレータ（デフォルトはスペース）
    RS		入力レコードセパレータ（デフォルトは改行文字）
    ORS		出力レコードセパレータ（デフォルトは改行文字）
    OFMT	数値の出力形式（デフォルトは %.6g）

■制御構造
    C と同じ（for で foreach のようなことができる以外）
    print, printf ではリダイレクト，パイプが使用できる

    文は以下のいずれか
	if (expression) statement [else statement]

	while (expression) satement 
	do satement while (expression)
	for (expression; expression; expression) statement
	for (var in array) statement	    # foreach のような用法
	    # var には array の添字の変数が予想できない順番で入る
	    # （ハッシュのキーが順番に得られると考えた方が良いだろう）
	    # ソートするには /usr/bin/sort の手助けが必要だ
	break
	continue
	{[statement] ...} # 複文
	expression
	print [expression-list] [>expression]	# リダイレクト
	print [expression-list] [|cmd]		# パイプ
	printf format [, expression-list] [>expression]
	printf format [, expression-list] [|cmd]
	exit [expr] # expr は終了ステータス

■組み込み関数
    ■算術関数
	cos(x), sin(x), exp(x), log(x), sqrt(x), int(x)

    ■文字列関数
	index(s, t)	文字列 s 中で文字列 t が最初に出現する位置を返
			す（先頭が 1，出現しなければ 0）
        int(s)		整数値になるよう s を切り捨てる
	length(s)	文字列の長さ
	match(s, re)	文字列 s 中で正規表現 re に最初にマッチする位置
	split(s, a, fs)	文字列 s を正規表現 fs でフィールド分けし，配列
			a の各要素(a[1], a[2],...a[n])に代入する
			値 n （要素数）を返す

			（nawk では fs は正規表現のようだが，awk では田
			  だの文字列のような感じが...）
	    
	sprintf(fmt, expr, expr) 
			同型式の printf で出力される文字列を返す
        substr(s, m, n)	文字列 s 中の m 番目から始まる長さ n の部分文字
			列を返す

    ■入出力関数
	getline		$0 に現入力ファイルの次のレコードを設定する
			正常時 1, EOF で 0, エラーで -1 を返す

=======================================================================
				その他
=======================================================================
■ nawk と gawk
    標準の awk は貧弱な機能しか持っていない。nawk, gawk はより強力な関
    数，組み込み変数，システムとの連係がサポートされている

■ perl で awk を真似る
    awk '/^#/' foo		    # # で始まる行を表示
    perl -n -e "print if /^#/;" foo
